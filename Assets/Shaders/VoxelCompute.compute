// VoxelNoiseCompute.compute
#pragma kernel CSMain
#pragma kernel SetVoxel

#include "Ruri_Common_FractalLibrary.hlsl"

struct Voxel
{
    uint type;
};
RWStructuredBuffer<Voxel> asyncVoxelBuffer;

// CPU传入
int3 gridPosition;
int newVoxelType; 

int3 chunkPosition;
uint3 chunkSize;

// 硬编码
float4 _QuaternionJuliaC;
float _QuaternionJuliaPosW;

// 综合分形距离估计函数
float CombinedFractalDE(float3 fractalPos, float4 minFractalPos, float4 maxFractalPos)
{
    float minDistance = 99999;

    // 2D 曼德博集合 DE
    float2 mandelbrotPos;
    float mandelbrotDistance = MandelbrotDE(fractalPos.xy, 1, mandelbrotPos);
    
    // 四元数茱莉亚集合 DE
    float4 pos4D = float4(fractalPos, _QuaternionJuliaPosW);
    float4 c = _QuaternionJuliaC;
    float4 quaternionJuliaPos;
    float quaternionJuliaDistance = QuaternionJuliaDE(pos4D, c, 10, quaternionJuliaPos);

    // 茱莉亚集合 DE
    float3 juliaPos;
    float juliaDistance = JuliaDE(fractalPos, juliaPos);
    
    // Amazing Box DE
    float3 amazingBoxPos;
    float amazingBoxDistance = AmazingBoxDE(fractalPos, -1.5, 1.0, 10, amazingBoxPos);
    
    // Mandelbulb DE
    float3 mandelbulbPos;
    float mandelbulbDistance = MandelbulbDE(fractalPos, 10, 8.0, mandelbulbPos);
    
    // Menger 海绵 DE
    float3 mengerPos;
    float mengerDistance = MengerSpongeDE(fractalPos, mengerPos);
    
    // 谢尔宾斯基地形 DE
    float3 sierpinskiPos;
    float sierpinskiDistance = SierpinskiDE(fractalPos, sierpinskiPos);
    
    // 克莱因群 DE
    float3 kleinianPos;
    //float kleinianDistance = KleinianDE(fractalPos, minFractalPos, maxFractalPos, kleinianPos);
    float kleinianDistance = KleinianDE(fractalPos * sqrt(length(mandelbrotPos)), minFractalPos, maxFractalPos, kleinianPos);
    
    //minDistance = min(minDistance, quaternionJuliaDistance);
    //minDistance = min(minDistance, mandelbrotDistance);
    minDistance = min(minDistance, kleinianDistance);
    //minDistance = min(minDistance, juliaDistance);
    //minDistance = min(minDistance, amazingBoxDistance);
    //minDistance = min(minDistance, mandelbulbDistance);
    //minDistance = min(minDistance, mengerDistance);
    //minDistance = min(minDistance, sierpinskiDistance);

    return minDistance;
}

//---------------------------------------------------
// 主计算函数
//---------------------------------------------------
[numthreads(4,4,4)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    // 使用行主序计算唯一索引
    int index = id.z + id.y * chunkSize.z + id.x * (chunkSize.y * chunkSize.z);
    
    // 计算世界坐标（与原逻辑保持一致）
    int3 worldPos = int3(id) + (chunkPosition * chunkSize); 
    // 旋转90度并缩放100倍匹配Unity坐标系
    float3 fractalPos = float3(worldPos.x, -worldPos.z, worldPos.y) * 0.01;
    
    // 硬编码克莱因群位置
    float4 minFractalPos = float4(-0.3252, -0.7862, -0.0948, 0.678);
    float4 maxFractalPos = float4( 0.3457,  1.0218,  1.2215, 0.9);
    float dist = CombinedFractalDE(fractalPos, minFractalPos, maxFractalPos);
    
    int voxelType = 0; // 空气方块
    if (dist < 0.0)
        voxelType = 1; // 土块 

    asyncVoxelBuffer[index].type = voxelType;
}

// 每个线程组只包含 1 个线程
[numthreads(1,1,1)]
void SetVoxel (uint3 id : SV_DispatchThreadID)
{
    // 计算 1D 下标
    int index = gridPosition.z +
                gridPosition.y * chunkSize.z +
                gridPosition.x * chunkSize.y * chunkSize.z;

    asyncVoxelBuffer[index].type = newVoxelType;
}